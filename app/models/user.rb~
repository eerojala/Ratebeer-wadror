class User < ActiveRecord::Base
 include RatingAverage

 has_secure_password

 validates :username, uniqueness: true,
                      length: {in: 3..15}
 validates :password, :format => {:with => /\A(?=.*[A-Z])(?=.*[0-9]).{4,}\z/, message: "must be atleast 4 characters long and include one number and one uppercase letter."}

 has_many :ratings, dependent: :destroy
 has_many :beers, through: :ratings
 has_many :memberships, dependent: :destroy

 def favorite_beer
   return nil if ratings.empty?
   ratings.order(score: :desc).limit(1).first.beer
 end

 def favorite_style
   return nil if ratings.empty?
   styles = map_styles
   most_common = most_common_style(styles)
   return most_common 
 end

 def most_common_style(styles)
    biggest_count = 0
    most_common = ""

    styles.each {|key, value| 
      if value > biggest_count
        biggest_count = value
        most_common = key
      end
    }

    return most_common
 end

 private
   def map_styles
     styles = Hash.new
     ratings.each do |r|
       count = styles[r.beer.style]
       if count.nil? 
         styles[r.beer.style] = 1
       else
         styles[r.beer.style] = count + 1
       end

     return styles
   end

   
 end

end
